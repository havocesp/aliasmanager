#!/bin/bash

# Generated by Alias Manager 1.6
# Christopher Welborn

# Note to user:
#     If you must edit this file manually please stick to this style:
#         Use tabs, not spaces.
#         No tabs before definitons.
#         Seperate lines for curly braces.
#         Use 1 tab depth for start of code block in functions.
#         Function description is first comment in code block. 
#         Alias description is comment right side of alias definition.
#         
#     ...if you use a different style it may or may not
#        break the program and I can't help you.



# Aliases:
alias ....="cd /" # cd to root
alias ...="cd ../.." # cd up twice
alias ..="cd .." # cd up one dir
alias .="pwd" # print working directory path
alias aptfix="sudo apt-get -f update" # try to fix broken packages..
alias cdsym="cd `pwd -P`" # leave symlink to actual directory
alias fe=" find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; " # find file and execute command on it
alias ff=" find . -type f -iname '*'$*'*' -ls ; " # find file
alias la="ls -Fa --color" # list all files in dir
alias ll="ls -alh --group-directories-first --color" # long list dir
alias ls="ls -a --color" # list dir
alias lt="tree -a --dirsfirst | less -W" # list dir using tree
alias mkdir="mkdir -p" # prevents "clobbering" files
alias myaliases="aliasmgr -pca" # print my aliases
alias myfunctions="aliasmgr -pcf" # print my functions
alias pipinstall="sudo pip install" # install pip package by name
alias pipsearch="sudo pip search" # search for pip package by name
alias pwd="pwd -P" # show actual directory (not symlink)
alias redit="gksudo kate" # root editor
alias rfiles="gksudo dolphin" # root browser

# Functions:
function aptcheck()
{
	# check if an apt package is installed by name...
	if [ "${1}" = "" ] ; then
		echo "Usage: aptcheck packagename"
	else
		aptitude show ${1} | grep "State:"
	fi
}

function aptinstall()
{
	# install apt package by name
	if [ "${1}" == "" ] ; then
		echo "Usage: aptinstall packagename"
	else
		sudo apt-get install ${1}
	fi
}

function aptname()
{
	# search for apt package by name
	if [ "${1}" == "" ] ; then
		echo "Usage: aptname packagename"
	else
		sudo apt-cache search --names-only ${1}
	fi
}

function aptsearch()
{
	# use dpkg to search for package (uses substring match)
	if [ "${1}" = "" ] ; then
		echo "Usage: aptsearch packagename"
	else
		dpkg -l *${1}*
	fi
}

function ask()
{
	# ask a question
	echo -n "$@" '[y/n] ' ; read ans
	case "$ans" in
		y*|Y*) return 0 ;;
		*) return 1 ;;
	esac
}

function b64decode()
{
	# decode base64 string
	if [ "${1}" == "" ]; then
		echo "Usage: b64decode QWxpYXMgTWFuYWdlcgo="
	else
		echo "${1}" | base64 -d
	fi
}

function b64encode()
{
	# encode a base64 string
	if [ "${1}" == "" ]; then
		echo "Usage: b64encode whattoencode"
	else
		echo "${1}" | base64
	fi
}

function camrecord()
{
	# record an uncrompressed avi with webcam
	if [ "${1}" == "" ]; then
		echo "Usage: camrecord newfilename.avi"
	else
		mencoder tv:// -tv driver=v4l:width=320:height=240:device=/dev/video0 -nosound -ovc lavc -o ${1}
	fi
}

function debinstall()
{
	# install a .deb package
	if [ "${1}" = "" ] ; then
		echo "Usage: debinstall debfile.deb"
	else
		if [ -f ${1} ]; then
			sudo dpkg -i *${1}*
		else
			echo "debinstall: File not found at "${1}
		fi
	fi
}

function define()
{
	# get definition of a word from the web
	if [ "${1}" = "" ] ; then
		echo "Usage: define dog"
	else
		lynx -dump -nonumbers -width=160 "http://dictionary.reference.com/browse/${1}" | grep -A15 "World English Dictionary"
	fi
}

function extract()
{
	# extract file by extension
	     if [ -f $1 ] ; then
	 case $1 in
	     *.tar.bz2)   tar xvjf $1     ;;
	     *.tar.gz)    tar xvzf $1     ;;
	     *.bz2)       bunzip2 $1      ;;
	     *.rar)       unrar x $1      ;;
	     *.gz)        gunzip $1       ;;
	     *.tar)       tar xvf $1      ;;
	     *.tbz2)      tar xvjf $1     ;;
	     *.tgz)       tar xvzf $1     ;;
	     *.zip)       unzip $1        ;;
	     *.Z)         uncompress $1   ;;
	     *.7z)        7z x $1         ;;
	     *)           echo "'$1' cannot be extracted via >extract<" ;;
	 esac
	     else
	 echo "'$1' is not a valid file"
	     fi
}

function gnomeicons()
{
	# turn gnome desktop icons on/off
	if [ "${1}" == "" ] ; then
		echo "Usage: gnomeicons true|false|on|off"
	else
		if [ "${1}" == "on" ] || [ "${1}" == "true" ]; then
			# Turn desktop icons ON
			gsettings set org.gnome.desktop.background show-desktop-icons true
			echo "Gnome Desktop Icons: ON"
		elif [ "${1}" == "off" ] || [ "${1}" == "false" ]; then
			# Turn desktop icons OFF
			gsettings set org.gnome.desktop.background show-desktop-icons false
			echo "Gnome Desktop Icons: OFF"
		else
			# Invalid option
			echo "Gnome Desktop Icons:"
			echo "gnomeicons: Invalid value "${1}
			echo "expecting: true, false, on, or off"
		fi
	fi
}

function ii()
{
	# show current internet information
	    echo -e "\nYou are logged on ${RED}$HOST"
	    echo -e "\nAdditionnal information:$NC " ; uname -a
	    echo -e "\n${RED}Users logged on:$NC " ; w -h
	    echo -e "\n${RED}Current date :$NC " ; date
	    echo -e "\n${RED}Machine stats :$NC " ; uptime
	    echo -e "\n${RED}Memory stats :$NC " ; free
	    my_ip 2>&- ;
	    echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
	    echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
	    echo -e "\n${RED}Open connections :$NC "; netstat -pan --inet;
	    echo
}

function kd()
{
	# change dir and list contents
	if [ "${1}" == "" ] ; then
		echo "Usage: kd directory_name"
	else
		cd "${1}"
		pwd
		ls -Fa --group-directories-first --color=auto
	fi
	
}

function lowercase()
{
	# makes all files in dir lowercase
	for file ; do
		filename=${file##*/}
		case "$filename" in
			*/*) dirname==${file%/*} ;;
			*) dirname=.;;
		esac
		nf=$(echo $filename | tr A-Z a-z)
		newname="${dirname}/${nf}"
		if [ "$nf" != "$filename" ]; then
			mv "$file" "$newname"
			echo "lowercase: $file --> $newname"
		else
			echo "lowercase: $file not changed."
		fi
	done
}

function mkdircd()
{
	# make dir and cd to it
	# mkdir -p "$@" && eval cd "\"\$$#\"" 
	if [ "${1}" = "" ] ; then
		echo "Usage: mkdircd myDir"
	else
		mkdir -p ${1}
		cd ${1}
	fi
}

function my_ip()
{
	# set MY_IP variable
	MY_IP=$(/sbin/ifconfig wlan0 | awk '/inet/ { print $2 } ' | \
	sed -e s/addr://)
	MY_ISP=$(/sbin/ifconfig wlan0 | awk '/P-t-P/ { print $3 } ' | \
	sed -e s/P-t-P://)
}

function showmyip()
{
	# shows current IP address
	echo "Gathering IP Address..."
	my_ip
	echo "IP: ${MY_IP}"
}

function spanish()
{
	# get spanish equivalent of word
	if [ "${1}" = "" ] ; then
		echo "Usage: spanish dog"
	else
		lynx -dump -nonumbers -width=160 "http://spanish.dictionary.com/definition/${1}?src=en" | grep "${1} / "
	fi
}

function symlink()
{
	# create a symbolic link arg2 = arg1
	if [ "${1}" = "" ] ; then
		echo "expecting path to linked file! (source)"
		echo "usage: symlink sourcefile destfile"
		exit
	fi
	if [ "${2}" = "" ] ; then
		echo "expecting path to link! (destination)"
		echo "usage: symlink sourcefile destfile"
		exit
	fi
	# Create the link
	sudo ln -s "${1}" "${2}"
}

function weather()
{
	# display weather per zipcode by christopher welborn.
	if [ "${1}" = "" ] ; then
		# echo "Usage: weather 90210"
		lynx -dump -nonumbers -width=160 "http://weather.unisys.com/forecast.php?Name=35501" | grep -A13 'Latest Observation'
	else
		lynx -dump -nonumbers -width=160 "http://weather.unisys.com/forecast.php?Name=${1}" | grep -A13 'Latest Observation'
	fi
}

function weatherweek()
{
	# show weather for the week per zipcode by christopher welborn
	if [ "${1}" = "" ] ; then
		# echo "Usage: weatherweek [Your ZipCode]"
		lynx -dump -nonumbers -width=160 "http://weather.unisys.com/forecast.php?Name=35501" | grep -A30 'Forecast Summary'
	else
		lynx -dump -nonumbers -width=160 "http://weather.unisys.com/forecast.php?Name=${1}" | grep -A30 'Forecast Summary'
	fi
}

function wmswitch()
{
	# switch window managers
	if [ "${1}" == "" ] ; then
		echo "Usage: wmswitch windowmanager"
		echo " Like: wmswitch lightdm"
	else
		sudo dpkg-reconfigure ${1}
	fi
}

# Exports:
export aptcheck
export aptinstall
export aptname
export aptsearch
export ask
export b64decode
export b64encode
export camrecord
export debinstall
export define
export extract
export gnomeicons
export ii
export kd
export lowercase
export mkdircd
export my_ip
export showmyip
export spanish
export symlink
export weather
export weatherweek
export wmswitch

